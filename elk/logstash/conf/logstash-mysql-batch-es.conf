# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
	jdbc{
		type => "batch"
		#The path to our download jdbc driver
		jdbc_connection_string => "jdbc:mysql://xx.xx.xx.xx:3306/test?useConfigs=maxPerformance&characterEncoding=utf8"
		jdbc_driver_library => "/usr/local/logstash/driver/mysql-connector-java-5.1.46.jar"
		jdbc_driver_class => "com.mysql.jdbc.driver"

		#The user we wish to execute our statement as
		jdbc_user => "root"
		jdbc_password => "root"

		#last_run_metadata_path => "./logstash_last_run_display"

		#every 5 minutes execute
		#schedule => "*/2 * * * *"
		schedule => "*/5 * * * *"
		#if clean_run set to true, sql_last_value is set to 19700101
		#clean_run => true
		last_run_metadata_path => "./last_run/logstash_jdbc_last_run_maintenance_test"
		record_last_run => true
		#out query
		#parameters => {"name" => "长沙大东家"}
		#statement => "select * from sys_user where name = :name"
		#statement => "SELECT (:sql_last_value + 10000) as cursor, mh.PK AS pk from mh  order by UNIX_TIMESTAMP(mh.modifiedTS) desc limit :sql_last_value offset 10000"
		statement => "SELECT mh.PK as cursor, mh.PK AS pk from mh where mh.PK > :sql_last_value order by mh.PK desc limit 10000"
		use_column_value => true
		tracking_column => "cursor"
		#jdbc_paging_enabled => "true"
		#jdbc_page_size => "1000"

		jdbc_default_timezone =>"Asia/Shanghai"
	}
}

filter {
	ruby {
		code => "
		event.set('modifiedts', event.get('modifiedts').time.localtime('+08:00'))
		event.set('createdts', event.get('createdts').time.localtime('+08:00'))
		"
		#path => "/logstash/template/template-rb.rb"
	}
}

output {
	if[type]=="batch" {
		stdout { codec => rubydebug }
		elasticsearch {
			hosts => ["http://localhost:8250"]
			index => "%{type}"
			#document_id => "%{id}"
			doc_as_upsert => true
			#user => "elastic"
			#password => "changeme"
			action => "index"
			manage_template=>true
			template_name=>"batch"
			template_overwrite => true
			template => "/logstash/template/template.json"
		}
	}
}